#!/bin/sh
#
#  Part of https://github.com/jaclu/ish-fstool
#
#  License: MIT
#
#  Copyright (c) 2023-2025: Jacob.Lundqvist@gmail.com
#
#  Using this as Launch cmd, adds several features:
#   - It waits for openrc to reach runlevel default
#   - It displays network connection status
#   - Can login as a pre-defined user
#   - Optionally it will do continuous logins, ie after session is ended
#     a new one is started
#
#  I first tried using a relaunch cmd triggering agetty in /etc/inittab
#    /sbin/agetty -a root pts/0 xterm-256color
#  but in my experimenting, I found that relaunch didn't trigger a new
#  agetty process once the first had timed out.
#
#  So I instead use this, run by 'Launch cmd' it will call /bin/login -f <username>
#  directly to set up the user session
#

#---------------------------------------------------------------
#
#   Device checks
#
#---------------------------------------------------------------

fix_stdio_device() {
    # log_display "fix_stdio_device()"
    fsd_src="$1"
    fsd_name="/dev/$2"

    [ -z "$1" ] && error_msg "fix_stdio_device() - no param 1"
    [ -z "$2" ] && error_msg "fix_stdio_device($fsd_src,) - no param 2"

    is_fs_chrooted && {
        error_msg "fix_stdio_device($1, $2) can not be used when chrooted"
    }
    [ -c "$fsd_name" ] || {
        log_display "Fixing $fsd_name"
        rm -f "$fsd_name"
        ln -sf "$fsd_src" "$fsd_name"
    }
    unset fsd_src fsd_name
    return 0
}

check_for_bad_null() {
    # log_display "check_for_bad_null()"
    [ -z "$1" ] && {
        error_msg "check_for_bad_null() - no param"
        return 1
    }
    bad_null="$1"
    [ -z "$bad_null" ] && {
        error_msg "call to check_for_bad_null() with no param"
    }
    [ -f "$bad_null" ] && {
        echo
        echo
        log_display "WARNING: $bad_null found - typo in /dev/null redirect?"
        echo
    }
    unset bad_null
    return 0
}

verify_device() {
    # log_display "verify_device()"
    vd_dev_name="$1"
    vd_maj="$2"
    vd_min="$3"
    [ -z "$vd_dev_name" ] && error_msg "verify_device() - no param 1"
    [ -z "$vd_maj" ] && error_msg "verify_device($vd_dev_name,,) - no param 2"
    [ -z "$vd_min" ] && error_msg "verify_device($vd_dev_name,$vd_maj,) - no param 3"

    is_fs_chrooted && {
        error_msg "verify_device($1, $2, $3) can not be used when chrooted"
    }

    maj_min=$(stat -c "%t:%T" "$vd_dev_name")
    maj_act=$(printf "%d\n" "0x${maj_min%:*}")
    min_act=$(printf "%d\n" "0x${maj_min#*:}")
    if [ "$vd_maj" != "$maj_act" ] || [ "$vd_min" != "$min_act" ]; then
        log_it "$vd_dev_name - misconfigured, was: $maj_act:$min_act"
        rm "$vd_dev_name"
    fi
    [ -c "$vd_dev_name" ] || {
        rm -f "$vd_dev_name" && mknod -m 666 "$vd_dev_name" c "$vd_maj" "$vd_min"
        log_display "Fixed $vd_dev_name"
    }
    unset vd_dev_name vd_maj vd_min
    unset maj_min maj_act min_act

    return 0
}

verify_devs() {
    # log_display "verify_devs()"
    #
    #  Make sure all /dev entries are reasonable
    #
    if is_fs_chrooted || [ ! -d /proc/ish ]; then
        # verify_devs() can only be run on non-chrooted iSH
        return
    fi

    fix_stdio_device /proc/self/fd/0 stdin
    fix_stdio_device /proc/self/fd/1 stdout
    fix_stdio_device /proc/self/fd/2 stderr

    check_for_bad_null /dev/nul

    #
    #  These seem to be recreated by iSH if missing, but they don't
    #  fix them if broken as in wrongly configured
    #
    verify_device /dev/clipboard 240 0
    if [ -f "$f_pts_0_as_console" ]; then
        # On iSH redirecting console to pts/0 is used to semi-fake
        # having first vterm being console
        verify_device /dev/console 136 0
    else
        verify_device /dev/console 5 1
    fi
    verify_device /dev/full 1 7
    verify_device /dev/location 240 1
    verify_device /dev/null 1 3
    verify_device /dev/ptmx 5 2
    verify_device /dev/random 1 8
    verify_device /dev/tty 5 0
    verify_device /dev/tty1 4 1
    verify_device /dev/tty2 4 2
    verify_device /dev/urandom 1 9
    verify_device /dev/zero 1 5
}

#---------------------------------------------------------------
#
#   Recovery mode
#
#---------------------------------------------------------------

recovery_mode_enable() {
    # log_display "recovery_mode_enable()"
    is_fs_chrooted && return # don't use on chrooted systems
    # Save current stty settings
    org_stty=$(stty -g)

    # Configure terminal to read a single character without waiting for Enter
    stty -icanon -echo min 0 time 0

    recovery_mode_active=true
    # echo "sleeping 1"
    # sleep 1
    recovery_mode_probe initial # initial check
}

recovery_mode_disable() {
    # log_display "recovery_mode_disable()"
    is_fs_chrooted && return # don't use on chrooted systems
    $recovery_mode_active || return
    recovery_mode_probe final # one last check
    recovery_mode_active=false
    if [ -n "$org_stty" ]; then
        stty "$org_stty"
        unset org_stty
        [ "$1" != "silent" ] && {
            echo "recovery-mode no longer possible"
            echo
        }
    else
        echo "NOTICE: Variable org_stty already cleared!"
    fi
}

recovery_mode_probe() {
    # log_display "recovery_mode_probe()"
    is_fs_chrooted && return # don't use on chrooted systems

    $recovery_mode_active || return
    key=$(dd bs=1 count=1 2>/dev/null)
    case "$key" in
    r | R)
        recovery_mode_trigger "$1"
        ;;
    *) ;;
    esac
}

recovery_mode_trigger() {
    # First do urgent tasks that are somewhat time sensitive
    touch "$f_recovery_mode"
    log_display "recovery_mode_trigger($1)"
    $recovery_mode_active || {
        error_msg "recovery_mode_trigger($1) - called when recovery is not active"
        return
    }
    f_recovery_mode_log=/var/log/recovery-mode.log
    recovery_mode_disable silent
    trap '' INT # abort capturing Ctrl-C

    # in case recovey was triggered before this was called
    verify_devs

    #region recovery explanation
    cat <<EOF

===  recovery-mode selected  ===
---  Starting rescue shell - On exit, App will terminate.
---  Be aware, this is  /bin/sh  in order to maximize chances of recovery
---  in case shell init-scripts are faulty. Most likely PATH is limited!
EOF
    #endregion

    ! is_fs_chrooted && [ ! -f "$f_pts_0_as_console" ] && {
        echo "---  inittab acions cancelled by recovery-mode are logged in:"
        echo "---    $f_recovery_mode_log"
        echo "---  This file will be removed when exiting recovery-mode!"
    }

    # Entering recovery mode
    /bin/sh -i

    # post recovery mode cleanup
    echo "Clearing recovery-mode"
    rm -f "$f_inittab_can_start"
    rm -f "$f_recovery_mode"
    rm -f "$f_recovery_mode_log"
    sleep 1
    exit 1 # exit App on iPad, reboot on iPhone
}

#---------------------------------------------------------------
#
#   boot up
#
#---------------------------------------------------------------

display_header() {
    # log_display "display_header()"
    if [ -f "$f_ift_release" ]; then
        ift_rel="$(cat "$f_ift_release" 2>/dev/null)" ||
            ift_rel="*** Failed to read $f_ift_release ***"
    else
        ift_rel=Unknown
    fi

    if fs_is_alpine; then
        fs_name="Alpine $(cat "$f_rel_alpine" 2>/dev/null)" ||
            fs_name="Alpine Unknown"
    elif fs_is_debian; then
        fs_name="Debian $(cat "$f_rel_debian" 2>/dev/null)" ||
            fs_name="Debian Unknown"
    elif fs_is_devuan; then
        #
        #  Devuan must come before Debian, since it also has the
        #  f_rel_debian file
        #
        fs_name="Devuan $(cat "$f_rel_devuan" 2>/dev/null)" ||
            fs_name="Devuan Unknown"
    else
        fs_name=Unknown
    fi

    echo
    echo "$prog_name - ish-fstools: $ift_rel - Filesystem: $fs_name"
    header_msg=""
    [ -f "$f_pts_0_as_console" ] && {
        header_msg="/dev/pts/0 is used as /dev/console"
        if $this_is_pts0; then
            header_msg="$header_msg - no session will be started on this vterm"
        else
            header_msg="$header_msg - this is: $(tty)"
        fi
        echo "$header_msg"
    }
    if $this_is_pts0 || is_fs_chrooted; then
        echo "Press 'r' during boot up for recovery-mode"
        echo
    fi

    unset ift_rel fs_name header_msg
}

boot_up() {
    # at boot up also log it
    # log_display "boot_up()"

    if [ -f "$f_pts_0_as_console" ]; then
        # also done in profile for interactive vterms
        /usr/local/bin/check-env-compatible

        recovery_mode_probe boot_up
        [ "$(stat -c "%t %T" /dev/console)" != "88 0" ] && {
            echo "Setting up /dev/pts/0 as console"
            rm -f /dev/console && mknod -m 222 /dev/console c 136 0
        }

        recovery_mode_disable "console mode"

        if [ -x "$cmd_custom_console_monitor" ]; then
            handle_custom_console_monitor
        else
            monitor_log_files
        fi
    else
        [ "$(stat -c "%t %T" /dev/console)" != "5 1" ] && {
            echo "Reverting console to normal mode"
            rm -f /dev/console && mknod -m 666 /dev/console c 5 1
        }
    fi
    # recovery_mode_disable "boot up completed"

    if is_fs_chrooted; then
        echo
        echo "This is chrooted, so runlevel_wait & network check are skipped"
        echo
    else
        runlevel_wait
    fi
}

runlevel_wait() {
    trap 'set_abort_runlevel_wait' INT
    # log_display "runlevel_wait()"
    while true; do
        sleep 2
        recovery_mode_probe runlevel-wait
        _current_runlevel="$(rc-status -r)"
        if [ "$_current_runlevel" = "$expected_runlevel" ]; then

	    # waiting for openrc to complete runlevel
	    log_display "Waiting for services to be processed"
	    while pgrep -f /sbin/openrc-run >/dev/null; do
		rc-status default  # display progress on console
		sleep 1
		recovery_mode_probe openrc-wait
	    done
	    rc-status default

            # clear before exiting loop
            unset _current_runlevel
            break
        fi

        _s="current runlevel is $_current_runlevel - waiting for"
        _s="$_s $expected_runlevel - press Ctrl-C to abort wait"
        log_display "$_s"
        # clear before potential exit
        unset _current_runlevel _s

        sleep 2
        [ -f "$f_recovery_mode" ] && return
        [ "$abort_runlevel_wait" = "1" ] && break
    done
    trap '' INT # abort capturing Ctrl-C
    log_display "runlevel completed: $(rc-status -r)"

}

set_abort_runlevel_wait() {
    trap '' INT # abort capturing Ctrl-C
    echo
    _s="***  Ctrl-C captured - aborting wait for runlevel"
    _s="$_s $expected_runlevel  ***"
    log_display "$_s"
    unset _s
    echo
    abort_runlevel_wait=1
}

#---------------------------------------------------------------
#
#   Console mode - using /dev/pts/0 as console only
#
#---------------------------------------------------------------

update_deb_log_kill_cmd() {
    #
    #  Since the cmd_tail might change, always
    #  update the kill cmd to its current definition
    #
    # log_display "update_deb_log_kill_cmd()"
    cmd_kill_tail_logging=/usr/local/sbin/kill_tail_logging
    #region kill_tail_logging cmd
    echo "#!/bin/sh
#  Called from /usr/local/bin/console-restart
#  Replaced by /usr/local/sbin/$prog_name during each reboot

(
    echo
    echo 'Console tailing of /var/log/* will be restarted'
    echo 'Non text-files will be ignored'
) >/dev/console

pgrep -f \"$cmd_tail\" | xargs -r kill
" >"$cmd_kill_tail_logging"
    #endregion
    chown root: "$cmd_kill_tail_logging"
    chmod 744 "$cmd_kill_tail_logging"

    unset cmd_kill_tail_logging
}

kill_console_tail() {
    #
    #  Only usable by Alpine, Debian uses console-restart, since the tail
    #  cmd isn't properly tied to /dev/pts/0 and thus can't receive Ctrl-C
    #
    # log_display "kill_console_tail()"
    [ -z "$cmd_tail" ] && {
        error_msg "kill_console_tail() - no cmd_tail defined"
        return 1
    }
    [ ! -x "$cmd_tail" ] && {
        error_msg "kill_console_tail() - cmd_tail is not executable: $cmd_tail"
        return 1
    }
    echo
    echo "Console tailing of /var/log/* will be restarted"
    echo "Non text-files will be ignored"
    pgrep -f "$cmd_tail" | xargs -r kill
}

select_log_files_to_monitor() {
    # log_display "select_log_files_to_monitor()"
    [ -z "$cmd_tail" ] && {
        error_msg "select_log_files_to_monitor() - no cmd_tail defined"
        return 1
    }
    [ ! -x "$cmd_tail" ] && {
        error_msg "select_log_files_to_monitor() - cmd_tail is not executable: $cmd_tail"
        return 1
    }
    #
    #  Add all text files in logdir
    #
    log_files=""
    d_logs=/var/log

    # shellcheck disable=SC2045
    for log_file in $(ls -t "$d_logs"); do
        #log_basename="$(basename "$logfile")"
        f_log_file="$d_logs/$log_file"
        [ ! -f "$f_log_file" ] && continue               # not a file
        file -b "$f_log_file" | grep -q text || continue # not a text file
        log_files="$log_files $f_log_file"
    done
}

handle_custom_console_monitor() {
    #
    #  If a custom console monitor is used, remember to touch
    #  $f_inittab_can_start once it is setup, so that inittab
    #  can commence its run
    #
    # log_display "handle_custom_console_monitor() - running $cmd_custom_console_monitor"
    $cmd_custom_console_monitor
    #
    #  Should not get here...
    #
    error_msg "exited: $cmd_custom_console_monitor"
    echo "Will shut down in 30s"
    sleep 30
    exit 1
}

monitor_log_files() {
    # log_display "monitor_log_files()"
    initial_console_run=true

    echo "Console tailing of /var/log/* - non text-files will be ignored"
    trap 'kill_console_tail' INT
    while true; do
        select_log_files_to_monitor
        if fs_is_alpine; then
            # allow restart of tail cmd
            restart_mthd="Press Ctrl-C to re-read logfiles"
        else
            # Ctrl-C not usable for this on Debian...
            # this tail is not tied to a pts
            restart_mthd="Run console-restart to re-read logfiles"
        fi
        echo "Entries without timestamp are typically console printouts"
        echo "$restart_mthd"
        echo
        $initial_console_run && {
            initial_console_run=false
            (
                #
                # run in bg with a sleep so that tail can start
                # before inittab commences
                #
                sleep 1
                touch "$f_inittab_can_start"
            ) &
        }
        # shellcheck disable=SC2086 # log_files should be expanded
        $cmd_tail $log_files 2>/dev/null
        sleep 1
    done

    error_msg "Exited console monitoring loop - shouldn't happen"
    echo "Will shut down in 30s"
    sleep 30
    exit 1 # shouldn't get here, but just in case
}

#---------------------------------------------------------------
#
#   vterm logins
#
#---------------------------------------------------------------

handle_logins() {
    # log_display "handle_logins()"
    while true; do
        #
        #  Ensure params are tried for each login attempt, in case they
        #  have been changed during the current session, and continuous
        #  logins is set
        #
        ignore_login_params=0
        login_with_param_check
        [ "$login_ex_code" != "0" ] && {
            error_msg "handle_logins() - $f_login_prog exited with: $login_ex_code"
        }

        #
        #  post login session, decide to exit or contimue
        #

        if is_fs_chrooted; then
            _s="This is chrooted, always terminating on logout,"
            _s="$_s this should also exit the chroot"
            log_display "$_s"
            exit 0
        fi

        if [ -f "$f_logins_continuous" ]; then
            echo
            _s="Will spawn a new login session. If this is not requested,"
            _s="$_s run config-ift"
            log_display "$_s"
            unset _s
            echo
            sleep 1
        else
            # echo
            # echo "To enable continuous vterm sessions, run config-ift"
            if $this_is_pts0; then
                # echo
                # echo "Shutting down system..."
                # echo
                /usr/local/sbin/shutdown now
                sleep 30 # give shutdown plenty of time to complete
                exit     # this will insta-kill iSH
            else
                log_display "Terminating vterm $(tty)"
                sleep 2
                exit
            fi
        fi
    done

    _s="===  Fell out of infinite $prog_name login loop -"
    _s="$_s Should really not happen!"
    log_display "$_s"
    unset _s
    echo "will sleep forever, please shutdown iSH"
    /bin/sleep infinity
}

login_with_param_check() {
    #
    #  Do this for each login, in case changes have been made
    #
    # log_display "login_with_param_check() ignore_login_params: $ignore_login_params"
    login_ex_code=0
    if [ "$ignore_login_params" != "1" ] &&
        [ -f "$f_login_default_user" ]; then

        def_user="$(cat "$f_login_default_user")"
        [ -n "$def_user" ] && {
            cut -d: -f 1 /etc/passwd | grep -qw "$def_user" || {
                echo
                _s="ERROR: default user for autologin: $def_user"
                _s="$_s is not valid"
                log_display "$_s"
                log_display "reverting to basic no params login"
                echo
                ignore_login_params=1
                #
                #  it should be safe to recuser once, sice param checks
                #  are disabled
                #
                login_with_param_check
                return
            }
        }
        _s="auto-login as: $def_user - can be changed by running: $prog_name"
        log_display "$_s"
        handle_etc_issue
        login_params="-f $def_user"
        unset def_user

        recovery_mode_disable login_param_checks
        log_display "Starting login with params: [$login_params]" noecho
        # shellcheck disable=SC2086  # in this case variable should expand
        $f_login_prog $login_params || {
            login_ex_code="$?"
            echo
            # log_display "><> $(date) login failed"
            _s="ERROR: login_with_param_check($login_params) -"
            _s="$_s $f_login_prog exited with: $login_ex_code,"
            _s="$_s trying to use params: $login_params"
            log_display "$_s"
            log_display "reverting to basic no params login"
            echo
            unset login_params _s
            ignore_login_params=1
            #
            #  it should be safe to recuser once, sice param checks
            #  are disabled
            #
            login_with_param_check
            return
        }
    elif is_fs_chrooted; then
        # log_display "Chrooted, no login params used"
        "$f_login_prog" -f root || {
            login_ex_code="$?"
            _s="$f_login_prog -f root - exited with: $login_ex_code"
            error_msg "$_s"
        }
    else
        log_display "Using bare bones login with no parameters"
        handle_etc_issue
        log_display "Starting login with no params" noecho
        #log_display "><> $(date) login no params: $f_login_prog"
        "$f_login_prog" || {
            login_ex_code="$?"
            # log_display "><> $(date) login failed"
            _s="login_with_param_check(no params) - login exited with: $login_ex_code"
            error_msg "$_s"
        }
        # log_display "><> $(date) post login no params"
    fi
    # log_display "><> $(date) logged out from login with params"
}

handle_etc_issue() {
    # log_display "handle_etc_issue()"
    #
    #  I haven't managed to get /etc/issue to display on console sessions.
    #  so manual handling
    #
    if [ -f "$f_issue_file" ] && [ -f "$f_profile_hints" ]; then
        echo
        cat "$f_issue_file"
    fi
}

#---------------------------------------------------------------
#
#   Various
#
#---------------------------------------------------------------

error_msg() {
    _em_msg="$1"
    _em_exit_code="${2:-1}"
    echo
    echo "ERROR[$0]: $_em_msg"
    echo
    log_it "$1"
    [ "$_em_exit_code" -gt -1 ] && {
        echo "Due to error dropping to /bin/sh - after exit system will reboot"
        /bin/sh
        exit "$_em_exit_code"
    }
}

log_it() {
    # In recovery-mode, skip logging to minimize risk of issues
    [ -f "$f_recovery_mode" ] && return

    # if no supported loggers are found, fall back to a non-dependency solution
    if [ -x "$cmd_logger" ]; then
        "$cmd_logger" "$prog_name" "$*"
    else
        echo "$(date +"%Y-%m-%d %H:%M:%S") ${prog_name}: $*" >>/var/log/syslog
    fi
}

log_display() {
    #
    #  In case of boot up issues, this output is both displayed
    #  and logged to a file, so that it can be reviewed
    #  This is not used for all output, only "essentials" indicating
    #  statuses during startup
    #  For log only items, give noecho as 2nd param
    #
    [ "$2" != "noecho" ] && echo "$1" >/dev/stderr
    #
    #  Since other tools launched by this might have changed it, set it
    #  here for now, later check if it is needed
    #
    log_it "$1"
}

is_ish() {
    [ -d /proc/ish ]
}

is_fs_chrooted() {
    # this quick and simple check doesn't work on ish
    # so lets pretend for now chroot does not happen on ish
    is_ish && return 1                  # would never happen here :)
    [ "$(uname -s)" != "Linux" ] && return 1 # can only chroot this on Linux
    ! grep -q " / / " /proc/self/mountinfo
}

fs_is_alpine() {
    [ -f "$f_rel_alpine" ]
}

fs_is_devuan() {
    [ -f "$f_rel_devuan" ]
}

fs_is_debian() {
    [ -f "$f_rel_debian" ] && ! fs_is_devuan
}

is_alpine_3_20() {
    fs_is_alpine || return 1

}

#===============================================================
#
#   Main
#
#===============================================================

#
#  Just set the bare min variables needed for recovery mode, in order
#  to hopefully capture inittab before it takes any action
#
# state_prefix=/etc/opt/ift
# f_recovery_mode="$state_prefix"/recovery-mode
# f_pts_0_as_console="$state_prefix"/pts_0_as_console
# cmd_logger=/usr/local/bin/logger
# rm -f "$f_recovery_mode"
# recovery_mode_enable

#  Continue with variable definitions
state_prefix=/etc/opt/ift
f_inittab_can_start="$state_prefix"/inittab_can_start
f_logins_continuous="$state_prefix"/login-continuous
f_login_default_user="$state_prefix"/login-default-username
f_profile_hints="$state_prefix"/show_profile_hints
f_pts_0_as_console="$state_prefix"/pts_0_as_console
f_recovery_mode="$state_prefix"/recovery-mode
f_ift_release=/etc/ish-fstools-release
f_rel_alpine=/etc/alpine-release
f_rel_devuan=/etc/devuan_version
f_rel_debian=/etc/debian_version

f_issue_file="/etc/issue"
f_login_prog="/bin/login"

expected_runlevel="default"
recovery_mode_active=false

cmd_custom_console_monitor=/usr/local/sbin/custom_console_monitor
cmd_tail="tail -n 0 -f "
cmd_logger=/usr/local/bin/logger

if [ "$(tty)" = "/dev/pts/0" ]; then
    this_is_pts0=true
else
    this_is_pts0=false
fi

#  Ensure no left-overs from a previous boot
rm -f "$f_inittab_can_start"
rm -f "$f_recovery_mode"
rm -f "$f_recovery_mode_log"

prog_name=$(basename "$0")

recovery_mode_enable

is_fs_chrooted && {
    # When chrooted, initttab won't execute so do such tasks here
    /usr/local/bin/logger "$prog_name" "===  System startup  ==="
    /usr/local/sbin/reset-run-dir
    /usr/local/sbin/rotate-logs.sh
    fs_is_alpine && /usr/local/sbin/update-motd
}

fs_is_debian && update_deb_log_kill_cmd
display_header
recovery_mode_probe main1

verify_devs
recovery_mode_probe main2

if is_fs_chrooted || $this_is_pts0; then
    boot_up # if /dev/console is used, pts/0 will not exit this
else
    # it works directly as user session starts, but not here, on iSH.
    # It does work when chrooted
    /usr/local/bin/network-check
fi

# recovery_mode_disable "End of main"
handle_logins
